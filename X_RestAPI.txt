twitter-api-v2 ライブラリを使用せずに、Rest APIを直接呼び出してX（旧Twitter）に投稿する方法をTypeScriptで実装する手順を説明します。Twitter APIはOAuth 1.0a認証を必要とするため、認証ヘッダーを自分で生成し、リクエストを構築する必要があります。以下にその手順を詳しく示します。
手順
1. 必要なモジュールのインストール
HTTPリクエストを送信するためのライブラリと、OAuth署名を生成するための暗号化ライブラリを準備します。ここでは、axios と crypto-js を使用します。
bash

npm install axios crypto-js

    axios: HTTPリクエストを送信するライブラリ。
    crypto-js: HMAC-SHA1署名を生成するための暗号化ライブラリ。

2. OAuth 1.0a認証に必要な情報の準備
Twitter APIを利用するには、以下の認証情報が必要です。これらはTwitter Developer Portalで取得できます。

    Consumer Key (API Key): アプリケーションを識別するキー。
    Consumer Secret (API Key Secret): アプリケーションの秘密キー。
    Access Token: ユーザーを識別するトークン。
    Access Token Secret: ユーザーの秘密トークン。

これらをコード内で使用するので、安全に管理してください。
3. TypeScriptでの実装
以下は、Twitter API v2のツイート投稿エンドポイント（https://api.twitter.com/2/tweets）にアクセスして投稿するサンプルコードです。
typescript

import axios from 'axios';
import * as CryptoJS from 'crypto-js';

// 認証情報（実際の値に置き換えてください）
const consumerKey = 'あなたのAPI Key';
const consumerSecret = 'あなたのAPI Key Secret';
const accessToken = 'あなたのAccess Token';
const accessTokenSecret = 'あなたのAccess Token Secret';

// 投稿するツイートのテキスト
const tweetText = 'こんにちは！TypeScriptからXに投稿しています。';

// APIエンドポイント
const apiUrl = 'https://api.twitter.com/2/tweets';

// OAuthパラメータの設定
const oauthParams = {
  oauth_consumer_key: consumerKey,
  oauth_token: accessToken,
  oauth_signature_method: 'HMAC-SHA1',
  oauth_timestamp: Math.floor(Date.now() / 1000).toString(), // 現在のUnixタイムスタンプ（秒）
  oauth_nonce: CryptoJS.lib.WordArray.random(32).toString(CryptoJS.enc.Base64), // 一意のランダム文字列
  oauth_version: '1.0',
};

// 署名ベース文字列を生成する関数
function generateSignatureBaseString(method: string, url: string, params: any): string {
  const sortedParams = Object.keys(params)
    .sort() // パラメータをアルファベット順にソート
    .map((key) => `${key}=${encodeURIComponent(params[key])}`)
    .join('&');
  return `${method.toUpperCase()}&${encodeURIComponent(url)}&${encodeURIComponent(sortedParams)}`;
}

// 署名を生成する関数
function generateSignature(signatureBaseString: string, signingKey: string): string {
  const hmac = CryptoJS.HmacSHA1(signatureBaseString, signingKey);
  return hmac.toString(CryptoJS.enc.Base64);
}

// 署名キーの生成
const signingKey = `${encodeURIComponent(consumerSecret)}&${encodeURIComponent(accessTokenSecret)}`;

// リクエストボディ（投稿内容）
const requestBody = { text: tweetText };

// 全パラメータ（OAuthパラメータとリクエストボディをマージ）
const allParams = { ...oauthParams, ...requestBody };

// 署名ベース文字列の生成
const signatureBaseString = generateSignatureBaseString('POST', apiUrl, allParams);

// 署名の生成
const oauthSignature = generateSignature(signatureBaseString, signingKey);

// OAuth認証ヘッダーの生成
const authHeader = `OAuth ${Object.entries({ ...oauthParams, oauth_signature: oauthSignature })
  .map(([key, value]) => `${key}="${encodeURIComponent(value)}"`)
  .join(', ')}`;

// ツイートを投稿する関数
async function postTweet() {
  try {
    const response = await axios.post(apiUrl, requestBody, {
      headers: {
        Authorization: authHeader,
        'Content-Type': 'application/json',
      },
    });
    console.log('ツイートが投稿されました:', response.data);
  } catch (error) {
    console.error('ツイート投稿エラー:', error.response?.data || error.message);
  }
}

// 実行
postTweet();

コードの解説
OAuthパラメータの設定

    oauth_consumer_key: Consumer Key。
    oauth_token: Access Token。
    oauth_signature_method: 署名方式（ここではHMAC-SHA1）。
    oauth_timestamp: 現在のUnixタイムスタンプ（秒単位）。
    oauth_nonce: 一意のランダム文字列（crypto-jsで生成）。
    oauth_version: OAuthのバージョン（1.0）。

署名ベース文字列の生成
generateSignatureBaseString 関数では、次の手順で署名ベース文字列を作成します：

    パラメータをアルファベット順にソート。
    キー=値の形式で結合し、&で連結。
    HTTPメソッド、URL、結合したパラメータを&で連結し、エンコード。

署名の生成

    署名キー: Consumer Secret と Access Token Secret を & で結合。
    generateSignature: 署名ベース文字列をHMAC-SHA1でハッシュ化し、Base64エンコード。

リクエストの送信

    authHeader: OAuthパラメータと署名をヘッダーに整形。
    axios.post: JSON形式のボディ（{ text: tweetText }）を指定し、POSTリクエストを送信。

注意点

    パラメータのエンコード: OAuthではRFC3986に基づくエンコードが必要です。encodeURIComponent を使用してください。
    署名の正確性: パラメータのソートやエンコードが間違っていると、401エラー（認証失敗）が発生します。
    タイムスタンプとノンス: oauth_timestamp は現在時刻、oauth_nonce は毎回異なる値である必要があります。
    エンドポイント: Twitter API v2のツイート投稿エンドポイントは https://api.twitter.com/2/tweets です。

実行方法

    上記のコードを index.ts に保存。
    以下のコマンドで実行：
    bash

    npx ts-node index.ts

    または、コンパイルしてから実行：
    bash

    tsc index.ts
    node index.js

まとめ
この方法を使えば、twitter-api-v2 ライブラリを使わずに、Rest APIを直接呼び出してXに投稿できます。OAuth 1.0a認証は手動で実装する必要があるため、署名生成やパラメータの扱いに注意しながら進めてください。認証情報は安全に管理し、必要に応じてエラーハンドリングを強化してください。